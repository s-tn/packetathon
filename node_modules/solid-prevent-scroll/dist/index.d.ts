import { MaybeAccessor } from '@corvu/utils/reactivity';
export { MaybeAccessor } from '@corvu/utils/reactivity';

/**!
 * Part of this code is inspired by react-remove-scroll.
 * MIT License, Copyright (c) Anton Korzunov
 *
 * https://github.com/theKashey/react-remove-scroll
 */

/**
 * Prevents scroll outside of the given element.
 *
 * @param props.element - Prevent scroll outside of this element. If the element is `null`, scroll will be prevented on the whole page. *Default = `null`*
 * @param props.enabled - Whether scroll should be prevented. *Default = `true`*
 * @param props.hideScrollbar - Whether the scrollbar of the `<body>` element should be hidden. *Default = `true`*
 * @param props.preventScrollbarShift - Whether padding should be added to the `<body>` element to avoid layout shift. *Default = `true`*
 * @param props.preventScrollbarShiftMode - Whether padding or margin should be used to avoid layout shift. *Default = `'padding'`*
 * @param props.restoreScrollPosition - Whether to restore the `<body>` scroll position with `window.scrollTo` to avoid possible layout shift after disabling the utility. *Default = `true`*
 * @param props.allowPinchZoom - Whether pinch zoom should be allowed. *Default = `false`*
 */
declare const createPreventScroll: (props: {
    element?: MaybeAccessor<HTMLElement | null>;
    enabled?: MaybeAccessor<boolean>;
    hideScrollbar?: MaybeAccessor<boolean>;
    preventScrollbarShift?: MaybeAccessor<boolean>;
    preventScrollbarShiftMode?: MaybeAccessor<"padding" | "margin">;
    restoreScrollPosition?: MaybeAccessor<boolean>;
    allowPinchZoom?: MaybeAccessor<boolean>;
}) => void;

export { createPreventScroll as default };
