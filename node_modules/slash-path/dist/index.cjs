'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var delegate = require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var delegate__default = /*#__PURE__*/_interopDefault(delegate);

// src/index.ts
var slash = (str = "") => {
  return str.replace(/\\/g, "/");
};
var normalize = (path) => {
  return slash(delegate__default.default.normalize(path));
};
var join = (...paths) => {
  return slash(delegate__default.default.join(...paths));
};
var resolve = (...paths) => {
  return slash(delegate__default.default.resolve(...paths));
};
var isAbsolute = (path) => {
  path = slash(path);
  return delegate__default.default.isAbsolute(path);
};
var relative = (from, to) => {
  return slash(delegate__default.default.relative(from, to));
};
var dirname = (path) => {
  return slash(delegate__default.default.dirname(path));
};
var basename = (path, suffix) => {
  return slash(delegate__default.default.basename(path, suffix));
};
var extname = (path) => {
  return slash(delegate__default.default.extname(path));
};
var parse = (path) => {
  let data = delegate__default.default.parse(path);
  data.root = slash(data.root);
  data.dir = slash(data.dir);
  data.base = slash(data.base);
  data.ext = slash(data.ext);
  data.name = slash(data.name);
  return data;
};
var format = (pathObject) => {
  return slash(delegate__default.default.format(pathObject));
};
var toNamespacedPath = (path) => {
  return slash(delegate__default.default.toNamespacedPath(path));
};
var src_default = {
  slash,
  normalize,
  join,
  resolve,
  isAbsolute,
  relative,
  dirname,
  basename,
  extname,
  parse,
  format,
  toNamespacedPath
};

exports.basename = basename;
exports.default = src_default;
exports.dirname = dirname;
exports.extname = extname;
exports.format = format;
exports.isAbsolute = isAbsolute;
exports.join = join;
exports.normalize = normalize;
exports.parse = parse;
exports.relative = relative;
exports.resolve = resolve;
exports.slash = slash;
exports.toNamespacedPath = toNamespacedPath;
