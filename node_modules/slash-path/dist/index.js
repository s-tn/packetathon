import delegate from 'path';

// src/index.ts
var slash = (str = "") => {
  return str.replace(/\\/g, "/");
};
var normalize = (path) => {
  return slash(delegate.normalize(path));
};
var join = (...paths) => {
  return slash(delegate.join(...paths));
};
var resolve = (...paths) => {
  return slash(delegate.resolve(...paths));
};
var isAbsolute = (path) => {
  path = slash(path);
  return delegate.isAbsolute(path);
};
var relative = (from, to) => {
  return slash(delegate.relative(from, to));
};
var dirname = (path) => {
  return slash(delegate.dirname(path));
};
var basename = (path, suffix) => {
  return slash(delegate.basename(path, suffix));
};
var extname = (path) => {
  return slash(delegate.extname(path));
};
var parse = (path) => {
  let data = delegate.parse(path);
  data.root = slash(data.root);
  data.dir = slash(data.dir);
  data.base = slash(data.base);
  data.ext = slash(data.ext);
  data.name = slash(data.name);
  return data;
};
var format = (pathObject) => {
  return slash(delegate.format(pathObject));
};
var toNamespacedPath = (path) => {
  return slash(delegate.toNamespacedPath(path));
};
var src_default = {
  slash,
  normalize,
  join,
  resolve,
  isAbsolute,
  relative,
  dirname,
  basename,
  extname,
  parse,
  format,
  toNamespacedPath
};

export { basename, src_default as default, dirname, extname, format, isAbsolute, join, normalize, parse, relative, resolve, slash, toNamespacedPath };
