import { parseColor } from '../chunk/IDYEERBC.js';
import { NumberFieldHiddenInput, NumberFieldInput, NumberFieldIncrementTrigger, NumberFieldDecrementTrigger, NumberFieldRoot } from '../chunk/PASM7WAP.js';
export { NumberFieldDecrementTrigger as DecrementTrigger, NumberFieldHiddenInput as HiddenInput, NumberFieldIncrementTrigger as IncrementTrigger, NumberFieldInput as Input } from '../chunk/PASM7WAP.js';
import { FormControlLabel } from '../chunk/7ZHN3PYD.js';
export { FormControlLabel as Label } from '../chunk/7ZHN3PYD.js';
import { FormControlErrorMessage } from '../chunk/ICNSTULC.js';
export { FormControlErrorMessage as ErrorMessage } from '../chunk/ICNSTULC.js';
import { FormControlDescription } from '../chunk/YKGT7A57.js';
export { FormControlDescription as Description } from '../chunk/YKGT7A57.js';
import { createControllableSignal } from '../chunk/BLN63FDC.js';
import { createComponent, mergeProps, memo } from 'solid-js/web';
import { mergeDefaultProps } from '@kobalte/utils';
import { createUniqueId, splitProps, createMemo } from 'solid-js';

function ColorChannelFieldRoot(props) {
  const defaultId = `colorchannelfield-${createUniqueId()}`;
  const mergedProps = mergeDefaultProps({
    id: defaultId
  }, props);
  const [local, others] = splitProps(mergedProps, ["value", "defaultValue", "onChange", "channel", "colorSpace"]);
  const [value, setValue] = createControllableSignal({
    value: () => local.value,
    defaultValue: () => local.defaultValue ?? parseColor("hsl(0, 100%, 50%)"),
    onChange: (value2) => local.onChange?.(value2)
  });
  const color = createMemo(() => local.colorSpace ? value().toFormat(local.colorSpace) : value());
  const range = createMemo(() => color().getChannelRange(local.channel));
  const formatOptions = createMemo(() => color().getChannelFormatOptions(local.channel));
  const multiplier = createMemo(() => formatOptions().style === "percent" && range().maxValue === 100 ? 100 : 1);
  const onRawValueChange = (value2) => {
    setValue(color().withChannelValue(local.channel, !Number.isNaN(value2) ? Math.round(Math.max(Math.min(value2 * multiplier(), range().maxValue), range().minValue)) : Number.NaN));
  };
  return createComponent(NumberFieldRoot, mergeProps({
    get rawValue() {
      return memo(() => !!Number.isNaN(color().getChannelValue(local.channel)))() ? void 0 : color().getChannelValue(local.channel) / multiplier();
    },
    get minValue() {
      return range().minValue / multiplier();
    },
    get maxValue() {
      return range().maxValue / multiplier();
    },
    get step() {
      return range().step / multiplier();
    },
    get formatOptions() {
      return formatOptions();
    },
    onRawValueChange
  }, others));
}

// src/color-channel-field/index.tsx
var ColorChannelField = Object.assign(ColorChannelFieldRoot, {
  Description: FormControlDescription,
  ErrorMessage: FormControlErrorMessage,
  HiddenInput: NumberFieldHiddenInput,
  Input: NumberFieldInput,
  IncrementTrigger: NumberFieldIncrementTrigger,
  DecrementTrigger: NumberFieldDecrementTrigger,
  Label: FormControlLabel
});

export { ColorChannelField, ColorChannelFieldRoot as Root };
